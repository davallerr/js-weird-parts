
--------------------------------------------------------------------------------------------------

SECTION 2

Global Object
- Functions written at the global scope essentially become methods of the global object
  (in browsers, the window object)

Exectution Context
- Performed in 2 phases: creation phase and execution phase

Creation Phase
- Sets up memory space for variables and functions // "hoisting"
- Function in entirety is put in memory space, but variable declarations are not
- Variables are all set up as undefined

Undefined
- A special value to indicate that the variable exists but hasn't been set a value
- Different from error that it "is not defined"
- No memory space set up for variable

JA is Single-Threaded
- One command run at a time
- JS is single-threaded in the way it runs in the browser, but the browser is not
- Browser is doing other things besides running JS

JS is Synchronous
- Run in order, at the time things are requested

Variable Environments
- Where variables live and how they relate to each other in memory

Scope
- Possible for 2 different variables to have same name if they sit in different execution contexts
- Still point to different spaces in memory

Asynchronous
- Other parts of the browser are able to do things while JS is doing its thing
- Event Queue: JS is able to be notified of outside activity and respond to it as directed
- When execution stack is empty, JS can process next event queue and run correspondingly
- JS only looks at event queue when execution stack is totally empty

--------------------------------------------------------------------------------------------------
