
--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

SECTION 2

Global Object
- Functions written at the global scope essentially become methods of the global object
  (in browsers, the window object)

Exectution Context
- Performed in 2 phases: creation phase and execution phase

Creation Phase
- Sets up memory space for variables and functions // "hoisting"
- Function in entirety is put in memory space, but variable declarations are not
- Variables are all set up as undefined

Undefined
- A special value to indicate that the variable exists but hasn't been set a value
- Different from error that it "is not defined"
- No memory space set up for variable

JA is Single-Threaded
- One command run at a time
- JS is single-threaded in the way it runs in the browser, but the browser is not
- Browser is doing other things besides running JS

JS is Synchronous
- Run in order, at the time things are requested

Variable Environments
- Where variables live and how they relate to each other in memory

Scope
- Possible for 2 different variables to have same name if they sit in different execution contexts
- Still point to different spaces in memory

Asynchronous
- Other parts of the browser are able to do things while JS is doing its thing
- Event Queue: JS is able to be notified of outside activity and respond to it as directed
- When execution stack is empty, JS can process next event queue and run correspondingly
- JS only looks at event queue when execution stack is totally empty


--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

SECTION 3

Primitives
- Undefined: lack of existence, don't se variables to this
  Null: lack of existence, but the one to use when you want to define a variable without a value
  Boolean: true or false
  Number: floating point, always some decimals
  String: sequence of characters
  Symbol: new in es6
- Honorary mention: NaN: cannot be evaluated as a number

Operators
- A special function that uses a unique (simple) syntax
- Takes 2 items and returns 1 item, based on what operator is used
- "Infix" notation

Associativity
- What oder operator functions are called when functions have the same precedence
- Either left-to-right, or right-to-left
  Common math (*/+-) all have left-to-right associativity
  Assignment(=) has right-to-left associativity

Coercion
- Converting a value from one type to another
- JS engine uses context clues of code in some cases other languages would throw an error

Precedence, associativity, and coercion
- Leads the statement (3 < 2 < 1) to return true
  < has left-to-right associativity, and evaluates as false, leaving (false < 1)
  In this case false is coerced to a number, 0, leading to (0 < 1) evaluating as true

Usefulness of coercion
- if(a) {} can be useful to check for existence of "a"
  only runs if "a" is undefined, null, 0, "" or other value that converts to false

Default value for variables
- ES6 has neat thing for providing defaults, but isn't discussed
- var = var || 'default value'
- can use || to provide default value, in case that left side of || doesn't exist (converts to false)

Frameworks/Libraries
- JS links in HTML file are stacked on top of one another and run in sequence like script file
  Can use default values to prevent colliding variables from other frameworks/libraries


--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

SECTION 4

Objects
- Object sits in memory, and has properties and methods that also sit in memory, to be referenced

Framework aside: faking namespace
- Namespace is a container for variables and functions
  JS doesn't have namespaces, but can fake it with objects
- Use objects as containers so different variables that need the same name don't collide and overwrite

JSON
- INSPIRED by object literal syntax, but is not the same thing
- Properties have to be wrapped in quotes in JSON, optional in JS
- All JSON syntax is valid object literal syntax, but not all object literal syntax is valid JSON
  JSON is more strict
  Functions cannot be properites (no methods)
- JSON.parse takes JSON string and converts it to an object literal syntax
  This can be assigned to a variable to create an object

Functions are objects

First class functions
- Everything you can do with other types, you can do with functions
- Assign them to variables, pass them around, use them as parameters, assign them on the fly
- Function is a special type of object, with invocable code associated with it as a property

Function statements and expressions
- Expression: a unit of code that results in a value, even if that value isn't assigned to anything
- Statement: unit of code that does work, but doesn't return a value

Value vs reference
- If a variable's primitive value is copied somehow, it will create a distinct copy
  Has its own place in memory
  Further changes to one no longer affect the other
- If a variable's object value is copied, it uses the same reference in memory
  Both point to the same place in memory
  Changes to one will continue to impact the copied reference
- Equals operator sets up a new memory space if object value doesn't already exist

"This"
- When code is invoked, an execution context is created, and "this" keyword is created
- "This" can reference different things depending on how a function is called
  In basic function invocation, "this" points to global object (often window)
  In an object's method, "this" points to the object the method sits inside of
  In an internal function within an object's method, "this" points up to the global object again
- Workaround: in method where "this" points to object, first line "var self = this;"
  Use "self" throughout instead of "this"
  At any point down a scope chain, "self" will always point to the "this" that references the object

Arrays
- Arrays can also hold functions

Arguments and spread
- Set up in execution context of function when called
- Arguments are hoisted when function's execution context is set up
  If parameters aren't passed into function, they'll exist but be undefined
  Function will still run if parameters aren't passed, so defaults can be defined
- Arguments is array-like, but not a true array
- Arguments will be deprecated by spread, the ... syntax that wraps into an array in the function

Function overloading
- In other programming languages, functions can have the same name but different parameters and no error
- JS gets around this because functions are first class functions, so other patterns achieve it

Syntax parsers
- Parsers go through code character by character with certain expectations and rules
  Parser can make changes to code, based on these rules

DANGEROUS ASIDE - syntax parser
- Automatic semicolon insertion
  Parser tries to anticipate what code intends, so is able to add semicolons if it thinks they're missing
- Can cause mistakes based on how code is written
- Common insertion: new line after "return", parser will insert semicolon right after "return"

Immediately invoked function expressions (IIFE)
- Function can be invoked immediately upon creation, without being attached to variable or anything
- Syntax parser can be "tricked" out of thinking an expression should be a function statement
  Putting it into parentheses makes parser understand it should be an expression
- (function(parameter) {code}(argument));

IIFEs and safe code
- IIFEs create execution contexts and prevent colliding and crashing with other code
- Very useful for frameworks, that will be working with other code that can't be anticipated
- Other scopes can be accessed by passing parameters into the IIFE
  Global object can be passed, so its variables can be accessed and changed

Closures
- Lexical scoping allows returned function to access memory space of containing function
  Even after the containing function has been removed from the execution context stack
- Function will always have access to information it is supposed to have, no matter when it's called


Classic closure example
----------------------------------

function buildFunctions() {
  var arr = [];

  for(var i=0; i<3; i++) {
    arr.push(
      function() {
        console.log(i);
      }
    );
  }

  return arr;
}

var fs = buildFunctions();

fs[0]();
fs[1]();
fs[2]();

----------------------------------
- Each call logs 3
  console.log(i) isn't actually called within the for loop
  Functions that log i aren't called (and therefore executed) until the for loop has run through
  i is 3 in the memory accessed through closure, all calls are referencing the same outer environment
  By the time each function is invoked, i is already 3
- Can be made to count 0-2 using ES6 'let' keyword and setting it to i within each round of the loop
- Can be done in ES5 using an IIFE to create a new execution context where i is set to j in a new memory space


Function factories
- Closures can be used to generate varying functions based on options that you set
  var greetEnglish = makeGreeting('en'); vs greetSpanish = makeGreeting('es');
  greetEnglish('john'); vs greetSpanish('john');
- Every time you call a function, it gets a new execution context
  So you can call the factory multiple times, feeding it different options
  Each created function's closure will still point to the execution context that created it

Callback function
- Function given to another function to run once the first function finishes

Call, apply, and bind
- Methods available to all function objects

Bind
- var newFunction = baseFunction.bind(thing that 'this' should refer to);
  Creates new function with 'this' manually set, does not execute it
  Can be called on the fly to make a single use copy to use at the time

Call
- Adds parameter at time of calling to set what 'this' should refer to
  Doesn't create a copy of the function, but actually executes it
  function.call(thisChoice, arg1, arg2);

Apply
- Similar to 'call' but arguments after what 'this' should be have to be given as an array
- Can be useful for mathematical applications

Method borrowing
- Can grab method from one object but set the 'this' keyword to another object
  person1.getFullName.apply(person2);

Function currying
- Can use bind with arguments, so new copy of function has permanent parameters
  function multiply(a, b) { return a*b; }
  var multiplyByTwo = multiply.bind(this, 2);
  'a' will always be 2 in new copy
  multiplyByTwo(4); will return 8

Functional programming
- Thinking and coding in terms of functions
  Using an approach based on first class functions
- Helps keep things DRY by abstracting the work each function does


Examples of functional programming
-----------------------------------------------

function mapForEach(arr, fn) {
  var newArr = [];

  for(var i=0; i<arr.length; i++) {
    newArr.push(
      fn(arr[i])
    );
  }

  return newArr;
}

var arr1 = [1,2,3];

var arr2 = mapForEach(arr1, function(item) {
  return item * 2;
});

var arr3 = mapForEach(arr1, function(item) {
  return item > 2;
});

var checkPastLimit = function(limiter, item) {
  return item > limiter;
}

var arr4 = mapForEach(arr1, checkPastLimit.bind(this, 1));

var checkPastLimitSimple = function(limiter) {
  return function(limiter, item) {
    return item > limiter;
  }.bind(this, limiter);
}

var arr5 = mapForEach(arr1, checkPastLimitSimple(2));

-----------------------------------------------
- Helps segment out the work each function does
  Instead of a doubling function and a limit-checker function that both have to loop through an array
  You can have a loop array function that other functions can make use of
- When working in functional programming, small work functions should avoid mutating data
  Data mutation should happen as far up the chain of work as possible


Iteratee or predicate
- Functions that do work, to be passed into and used by other functions
- Common in frameworks, like underscore and lodash
  underscorejs.org/docs/underscore.html

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

Section 5

Classical vs prototypal inheritance
- Classical: verbose, can lead to complex structures of shared information
- Prototypal: simple, extensible, can be clearer to understand

The prototype
- Property that references an object where methods can be stored
  "Proto" properties can be accessed without explicitly directing JS to the protoype property
  myArray.map() looks like it's accessing the method directly in myArray, but it's actually in the Array object prototype
- "Proto" can have its own "proto" which creates a "prototype chain"
  Determines where properies and methods can be accessed by objects further down the protype chain
- Multiple objects can share a prototype chain, to reference the same methods and properties up the chain
- BAD PRACTICE
  Can be set manually: obj2.__proto__ = obj1
  Makes obj1 the protoype of obj2
  obj2 can now reference methods defined in obj1 like obj2.getFullName()

Everything is an object (except primitives)
- And everything that is an object has a prototype
  Except for the Object object, which is the end of the prototype chain

Reflection
- An object can look at itself, listing and changing its properties and methods
  for(var prop in obj1) {
    if(john.hasOwnProperty(prop)) {
      only activates if prop is direct property of obj1, not its prototype;
    }
  }
- Objects can access their own metadata and know things about it
  Like if it's a direct property or part of its prototype (hasOwnProperty)

Extend
- Uses reflection to access other objects' properties/methods, and copy them to target object

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

Section 6

Class - function constructors
- JS up to ES5 doesn't really have classes the way other languages do
  Class keyword upcoming
- Something like a class can be created by object constructor function
  var john = new Person();
  "new" keyword immediately creates an empty object
  "new" changes what happens with "this" and what is returned
  The constructor function's "this" keyword then points to that newly created empty object
  As long as constructor doesn't have its own "return" value, it returns the new object

Setting prototype
- Function constructor method automatically set as the prototype of objects created using it
- The "prototype" property of a function IS NOT the prototype of the function
  It is the prototype of any objects created if the function is used as a constructor
- Person.prototype doesn't point to Person's prototype
  It refers to content in Person's prototype property
  Objects created using the Person constructor can access methods and stuff in there
  Objects to which Person is the prototype (john, jane, if they were created using Person)
- Adding methods to Person's prototype becomes more efficient than including it in the constructor function
  If methods are defined with the constructor function, every object created using it gets a new COPY of it
  Using Person.prototype.newMethod creates it once, but every object can use it

"New" and functions
- If a function constructor is called without "new" the new variable you're trying to create will be undefined
  It will just call the function, and since it doesn't return anything nothing will be put in the variable

Built-in function constructors
- var a = new Number(3);
  a will become an object containing a "[PrimitiveValue]" of 3
- var a = new String('John');
  a is an object with a bunch of key/value pairs for each character, and a "[PrimitiveValue]" of "John"
- var a = new Date('3/1/2015');
- Built-in function constructors can have methods added to their prototype property
  All objects with that built-in function constructor as a prototype will have access to it
  Have to be careful not to overwrite existing ones and eff the language up
- Some things will be automatically treated like an object, with access to prototypes
  Others don't, like a variable assigned as a number without using the new Number(3) syntax
  var a = 3;
  var b = new Number(3);
  a == b // returns true
  a === b // returns false
  Variable b is an object, not a primitive
- Can be dangerous to use built-in function constructors because what's created will be an object
  Moment.js is great for working with dates without using the Date() constructor

Arrays and for...in
- An array is an object, and items in it are basically properties assigned a numerical key
  Anything added to Array's prototype property will therefore be available in all arrays
  These will be considered if the array is iterated over using the "for(var prop in arr)" syntax
- Always using "for(var i=0; i<arr.length; i++)" to iterate over arrays
  Iterating this way won't get into the array's prototype methods

Object.create and pure prototypical inheritance
- var john = Object.create(Person);
  Object.create() creates a new empty object with the argument passed as the prototype
- Doesn't try to imitate how other languages handle classes and inheritance

Polyfill
- Code that adds a feature that the engine may lack
  Checks if environment has feature, and if not creates feature so it can be used in rest of code 
  Lets you use newer features, but still support older browsers/environments


Example polyfill that creates Object.create functionality
-----------------------------------------------

if(!Object.create) {
  Object.create = function(o) {
    if(arguments.length > 1) {
      throw new Error('Object.create implementation only accepts the first parameter.');
    }
    function F() {}
    F.prototype = o;
    return new F();
  };
}

-----------------------------------------------
- If browser supports Object.create, browser will just skip it

ES6 and classes
- The "class" created using new syntax will still be an object
  Still different from how other languages handle classes
  class Person {
    constructor(prop1, prop2) {
      this.prop1 = prop1;
      this.prop2 = prop2;
    }

    method1() {
      do something, maybe using prop1;
    }
  }
  var john = new Person('first prop', 'second prop');
- Mostly just ensures an error will occur if "new" isn't used to create new object with it
- Set prototype:
  class InformalPerson extends Person {
    constructor(prop1, prop2) {
      super(prop1, prop2);
    }

    method1() {
      overwrites prototypes method with same name
    }
  }

Syntactic sugar
- A different way to type something that doesn't actually change how it works under the hood
  "class" keyword is sugar, doesn't change fact of protypal inheritance

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

Section 7

Initialization
- Big bunch of organized data, like an array of objects that each contain arrays, child objects, etc

typeof, instanceof, and figuring out what something is
- typeof tells you what kind of data a variable is
  Doesn't work great for arrays, because array's are also objects
  typeof null; returns object (this is a bug but there are frameworks that rely on it working that way)
  Object.prototype.toString.call(var); works better, if an array it returns [Object Array]
- var intanceof PossibleProto; tells you if "var" at any point has PossibleProto in its prototype chain

Strict mode
- "use strict";
- Makes JS throw errors for some things it would otherwise allow
  person = {}; would error
  var person = {}; no errors

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

Section 8

Learning from others' good code
- Open source education
  Read source code of good frameworks and libraries, and read how they handle things
  Can read ish right on github

lecture 70
jQuery deep dive