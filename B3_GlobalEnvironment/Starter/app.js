
//////////////////////////////////////////////////////////////////////////////////
// HOISTING
//////////////////////////////////////////////////////////////////////////////////
/*
function b() {
  console.log('Called b!');
}

b();

console.log(a);
var a = 'Hello World!';
console.log(a);
*/
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
// EXECUTION CONTEXT
//////////////////////////////////////////////////////////////////////////////////
/*
function b() {
  var myVar;
  console.log(myVar);
}

function a() {
  var myVar = 2;
  console.log(myVar);
  b();
}

var myVar = 1;
console.log(myVar);
a();
console.log(myVar);
*/
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
// SCOPE CHAIN
//////////////////////////////////////////////////////////////////////////////////
/*
// function b's reference to outer environment is still global
// determined by lexical environment
function b() {
  console.log(myVar);
}

function a() {
  var myVar = 2;
  b();
}

var myVar = 1;
a();
*/

/*
// function b's next reference to outer environment is now function a
// function b is now created during function a's creation phase
function a() {

  function b() {
    console.log(myVar);
  }

  var myVar = 2;
  b();
}

var myVar = 1;
a();
*/
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
// BLOCK SCOPING
//////////////////////////////////////////////////////////////////////////////////
// 'let' allows for even more localized instances of variables
// scoped by 'block' which includes for loops and if statements
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////
// ASYNCHRONOUS CALLBACKS
//////////////////////////////////////////////////////////////////////////////////
/*
function waitThreeSeconds() {
  var ms = 3000 + new Date().getTime();
  while (new Date() < ms) {}
  console.log('finished function');
}

function clickHandler() {
  console.log('click event!');
}

// listen for click
document.addEventListener('click', clickHandler);

waitThreeSeconds();
console.log('finished execution');
*/
//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
